## 🛠️ Prompt for Replit AI — Enable Reliable “Add to Home Screen” on our PWA

### 1. Goal
Make sure the existing codebase meets *all* install‑ability requirements so every modern mobile browser shows our “Add to Home Screen / Install” prompt.

### 2. Scope of work  
Work only in the front‑end project (React/Vite).  
Do **not** alter back‑end routes, DB migrations, or CI workflows unless explicitly stated below.

### 3. Tasks & Checks

#### 3.1 Web‑App Manifest  
1. Find **`public/manifest.json`** (or its equivalent).  
2. Verify it contains at minimum:  
   - `"name"` and `"short_name"`.  
   - `"start_url": "."` (relative URL).  
   - `"display": "standalone"` (or `"minimal-ui"`).  
   - Icons: `192×192` **and** `512×512` PNGs with `"purpose": "any"` or `"maskable any"`.  
3. Confirm `<link rel="manifest" …>` is present in the root HTML template.  
4. If missing icons, create placeholder PNGs with a solid background matching the design system colour and place them in `public/icons/`. Add correct paths to the manifest.

#### 3.2 Service Worker  
1. Locate existing SW registration (e.g., `src/swRegistration.ts` or `index.tsx`).  
2. Ensure `navigator.serviceWorker.register('/sw.js')` runs **only once** after `window.load`, wrapped in a feature‑detection guard.  
3. Open **`public/sw.js`** (or equivalent):  
   - Confirm there is at least one `fetch` listener returning a network‑first or cache‑first response.  
   - Add an **offline fallback** (`/offline.html`) if none exists.  
4. Make sure Build tooling copies the SW and manifest into the final `dist/` folder.

#### 3.3 “beforeinstallprompt” integration  
1. Create/verify a React hook (`usePWAInstall`) or simple module bound at `App` level:  
   - Listen for `beforeinstallprompt`, call `e.preventDefault()`, store the event in state.  
   - Expose a method `triggerInstall()` that calls `deferredPrompt.prompt(); deferredPrompt.userChoice …`.  
2. Inject a small floating **Install** button (e.g., `components/InstallFAB.tsx`) that:  
   - Only appears when the saved event exists.  
   - Hides after successful install or dismissal.  
   - Is keyboard accessible and aria‑labelled.

#### 3.4 iOS / Safari fallback  
1. Add meta tags to `index.html` head section:  

   ```html
   <meta name="apple-mobile-web-app-capable" content="yes" />
   <meta name="apple-mobile-web-app-status-bar-style" content="default" />
   <link rel="apple-touch-icon" href="/icons/192.png" />
Detect window.navigator.standalone === false and iOS UA; display a non‑intrusive banner guiding the user:
“Tap  Share  →  Add to Home Screen”.

3.5 Regression‑safe refactor
Keep all existing imports, bundler aliases, and global styles intact.

Any new file must use the project’s lint/prettier rules (run npm run lint:fix).

Write changes in TypeScript if the repo already uses .tsx; otherwise stay in plain JS.

Wrap all new logic in clear, self‑contained components or utilities to minimise diff size.

